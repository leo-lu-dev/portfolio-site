services:
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - 80:80
    depends_on:
      - backend-proxy
  
  backend:
    build:
      context: ./backend
    container_name: backend
    volumes:
      - ./backend/static:/app/static
    ports:
      - 8000:8000
    env_file:
      - .env

  backend-proxy:
    image: nginx:latest
    container_name: backend-proxy
    ports:
      - 8080:80
      - 443:443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./backend/static:/app/static
      - ./frontend/dist:/usr/share/nginx/html
      - /dev/null:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend

#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     secrets:
#       <<: *db-secrets
#     environment:
#       <<: *db-env
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
      
# volumes:
#   db-data:
# secrets:
#   db:
#     external: true
#   db-user:
#     external: true
#   db-password:
#     external: true

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
    
#     expose:
#       - 5432
    